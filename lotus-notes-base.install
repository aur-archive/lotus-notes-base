# Note: The pre/post install actions are taken from official .deb packages and modified to work with Arch.

## arg 1:  the new package version
pre_install() {
	INSTALL_PREFIX=/opt/ibm/lotus/notes
	export INSTALL_PREFIX
	function func_installLog
	{
		echo `date "+%Y-%m-%d %T"` $1 >> /tmp/rcp_install.log
	}

	func_checkIfRunning()
	{
		pid=`ps ax | grep "$PREFIX" | grep "eclipse \-data" | grep -v grep | cut -f1 -d" "`

		if [ -n "$pid" ]; then
			func_installLog "A running instance of the platform was detected, pid=$pid"
			func_installLog "Please exit the platform before installing/upgrading"
			exit 70
		fi
	}

	# Set up environment
	umask 0022

	if [ -e /opt/gnome/bin ]; then
		export PATH=$PATH:/opt/gnome/bin
	fi

	if [ -n $DISPLAY ]; then
		export -n DISPLAY=
	fi

	NOTES_BIN_DIR=/opt/ibm/lotus/notes 
	if [ -n "$INSTALL_PREFIX" ]; then
		NOTES_BIN_DIR=$INSTALL_PREFIX
	fi
	PREFIX=${NOTES_BIN_DIR}/framework

	mkdir -p $PREFIX
	rm -rf /tmp/rcp_install.log

	if [ "$USER" = "" -o -n "$SUDO_USER" ]; then
		export USER=root
		if [ -d /root ]; then
			export HOME=/root
		fi
	fi
		
	func_installLog "-- Begin pre-install..."
	func_checkIfRunning

	RCPLAUNCHER_PROPS=`echo $PREFIX/rcp/rcplauncher.properties`
	RCP_INSTALL_ID=`date +%s`

	func_installLog "-- End pre-install..."
}

## arg 1:  the new package version
post_install() {
	function func_installLog
	{
		echo `date "+%Y-%m-%d %T"` $1 >> /tmp/rcp_install.log
	}

	function func_mergeINI
	{
		ORIGFILE=$1
		MERGEFILE=$2
		OUTFILE=$3

		if [ ! -f $ORIGFILE -a -f $MERGEFILE ]; then
			mv $MERGEFILE $OUTFILE
			return
		fi

		if [ ! -f $MERGEFILE -a -f $ORIGFILE ]; then
			mv $ORIGFILE $OUTFILE
			return
		fi  

		# Ensure we have newlines so read will pickup all lines in the file
		echo "" >> $ORIGFILE
		echo "" >> $MERGEFILE

		typeset -i i=0
		declare -a props
		
		exec 8< $ORIGFILE
		while read -u 8
		do
			if [ ! -z "${REPLY}" ]; then
				COMMENT=`echo "$REPLY" | cut -c1`
				if [ "${COMMENT}" != "#" ]; then
					props[$i]=$REPLY
					i=$i+1
				fi
			fi
		done

		exec 9< $MERGEFILE
		while read -u 9
		do
			if [ ! -z "${REPLY}" ]; then
				COMMENT=`echo "$REPLY" | cut -c1`
				if [ "${COMMENT}" != "#" ]; then
					FOUND="false"
					NEWPROP=`echo "$REPLY" | cut -d"=" -f1`
					for ((k = 0; k < i; k++))
					do
						ORIGPROP=`echo "${props[$k]}" | cut -d"=" -f1`
						if [ "${NEWPROP}" = "${ORIGPROP}" ]; then
							props[$k]=$REPLY
							FOUND="true"
						fi
					done
					if [ ${FOUND} = false ]; then
						props[$i]=$REPLY
						i=$i+1
					fi
				fi
			fi
		done

		echo "${props[0]}" > $OUTFILE
		for ((k = 1; k < i; k++))
		do
			echo "${props[$k]}" >> $OUTFILE
		done

		rm -f $ORIGFILE
		rm -f $MERGEFILE
	}

	function func_replacePropValue
	{
		PROPFILE=$1
		PROPNAME=$2
		NEWPROPVALUE=$3

		if [ ! -f $PROPFILE ]; then
			return
		fi

		# Ensure we have newlines so read will pickup all lines in the file
		echo "" >> $PROPFILE

		typeset -i i=0
		declare -a props

		exec 8< $PROPFILE
		while read -u 8
		do
			if [ ! -z "${REPLY}" ]; then
				READPROP=`echo "$REPLY" | cut -f1 -d"="`
				if [ "${READPROP}" = "$PROPNAME" ]; then
					 props[$i]="$PROPNAME=$NEWPROPVALUE"
				else
					 props[$i]="$REPLY"
				fi
				i=$i+1
			fi
		done

		echo "${props[0]}" > $PROPFILE
		for ((k = 1; k < i; k++))
		do
			echo "${props[$k]}" >> $PROPFILE
		done
	}

	function func_replaceText 
	{
		FILE=$1
		ORIGTEXT=$2
		NEWTEXT=$3

		if [ ! -f $FILE ]; then
			return
		fi

		# Ensure we have newlines so read will pickup all lines in the file
		echo "" >> $FILE

		typeset -i i=0
		declare -a lines

		exec 8< $FILE
		while read -u 8
		do
			if [ ! -z "${REPLY}" ]; then
				lines[$i]=`echo "${REPLY}" | sed s/${ORIGTEXT}/${NEWTEXT}/`
				i=$i+1
			fi
		done

		echo "${lines[0]}" > $FILE
		for ((k = 1; k < i; k++))
		do
			echo "${lines[$k]}" >> $FILE
		done
	}

	function func_installProvisioning
	{
		if [ "$SKIP_PROVISIONING_ACTION" != "true" ]; then
			if [ "$PROVDEBUG" = "true" ]; then
				echo "Pause for provisioning debug.  For development use only."
				read x    
			fi

			if [ -n "$UPDATE_SITE_LIST" ]; then 
				OVERRIDE="-DprovUpdateSiteListOverride=$UPDATE_SITE_LIST"
			fi

			func_installLog "-- Running provisioning with the following command:"

			if [ -n "$PROVDEBUGCOMMANDFILE" ]; then
				PROVCOMMAND=`cat $PROVDEBUGCOMMANDFILE | sed s/debugCommand=//`
			else
				PROVCOMMAND="$PREFIX/rcp/rcplauncher -provManifest -rcpLauncherWait -noSplash -product NULL -provisioningOperation $PROV_OP -vmargs -DprovisioningOperation=$PROV_OP $OVERRIDE"
			fi

			func_installLog "-- $PROVCOMMAND"
			$PROVCOMMAND &>/dev/null

			# Check return code file to see if provisioning returned with 
			# success/error/partial results and log.
			if [ -f $PREFIX/.provisioning_rc ]; then 
				PROV_RC=`cat $PREFIX/.provisioning_rc | grep rc= | sed s/rc=//` 
				if [ "$PROV_RC" = "0" ]; then
					func_installLog "-- Provisioning success"
				elif [ "$PROV_RC" = "1" ]; then
					func_installLog "-- Provisioning error"
				elif [ "$PROV_RC" = "2" ]; then
					func_installLog "-- Provisioning success with partial results"
				fi

				rm -f $PREFIX/.provisioning_rc
			else
				func_installLog "-- Provisioning failed to launch, or terminated unexpectedly"
				func_installLog "-- Platform may have been running when upgrade/uninstall/hotfix was attempted"    
			fi 
		fi
	}

	function func_getJVMAndBaseInfo
	{
		func_installLog "-- Detecting JVM..." 
		USE_JCL_DESKTOP=`ls $PREFIX/rcp/eclipse/plugins | grep jcl.desktop | tail -n1 -`
		USE_J2SE=`ls $PREFIX/rcp/eclipse/plugins | grep j2se | tail -n1 -`

		if [ -n "$USE_JCL_DESKTOP" ]; then
			func_installLog "-- JVM is jcl.desktop..." 
			JVM_PLUGIN=`ls $PREFIX/rcp/eclipse/plugins | grep com.ibm.rcp.jcl.desktop.linux.x86_ | tail -n1 -`
			JVM_LOCATION=\${rcp.home}/rcp/eclipse/plugins/$JVM_PLUGIN/jre/bin/expeditor
			JVM_FEATURE_ID=com.ibm.rcp.jcl.desktop.linux.x86.feature
		elif [ -n "$USE_J2SE" ]; then
			func_installLog "-- JVM is j2se..." 
			JVM_PLUGIN=`ls $PREFIX/rcp/eclipse/plugins | grep com.ibm.rcp.j2se.linux.x86_ | tail -n1 -`
			JVM_LOCATION=\${rcp.home}/rcp/eclipse/plugins/$JVM_PLUGIN/jre/bin/classic/libjvm.so    
			JVM_FEATURE_ID=com.ibm.rcp.j2se.linux.x86.feature
		else
			func_installLog "-- No JVM detected..." 
			exit 20
		fi

		JVM_FEATURE_VERSION=`ls $PREFIX/rcp/eclipse/features | grep $JVM_FEATURE_ID | tail -n1 - | sed s/$JVM_FEATURE_ID//g | sed s/_//g`
		JVM_PARENT_FEATURE_ID=com.ibm.rcp.jvm.feature
		JVM_PARENT_FEATURE_VERSION=`ls $PREFIX/rcp/eclipse/features | grep $JVM_PARENT_FEATURE_ID | tail -n1 - | sed s/$JVM_PARENT_FEATURE_ID//g | sed s/_//g`
		RCP_BASE_PLUGIN=`ls $PREFIX/rcp/eclipse/plugins | grep com.ibm.rcp.base_ | tail -n1 -`
		RCP_BASE_LOCATION=\${rcp.home}/rcp/eclipse/plugins/$RCP_BASE_PLUGIN
	}

	function func_initializeJXECache
	{
		if [ -n "$USE_JCL_DESKTOP" -a "$SKIP_PROVISIONING_ACTION" != "true" ]; then
			func_installLog "-- Running JXE initialization with the following command:"

			INITJXECOMMAND="$PREFIX/rcp/rcplauncher -noSplash -application com.ibm.jxesupport.initializer.initialize"

			func_installLog "-- $INITJXECOMMAND"
			$INITJXECOMMAND
		fi
	}

	# Set up environment
	umask 0022

	if [ -e /opt/gnome/bin ]; then
		export PATH=$PATH:/opt/gnome/bin
	fi

	if [ -n $DISPLAY ]; then
		export -n DISPLAY=
	fi

	NOTES_BIN_DIR=/opt/ibm/lotus/notes 
	if [ -n "$RPM_INSTALL_PREFIX" ]; then
		NOTES_BIN_DIR=$RPM_INSTALL_PREFIX
	fi
	PREFIX=${NOTES_BIN_DIR}/framework

	if [ "$USER" = "" -o -n "$SUDO_USER" ]; then
		export USER=root
		if [ -d /root ]; then
			 export HOME=/root
		fi
	fi

	func_installLog "-- Begin post-install..."

	# General variable initialization
	RCPLAUNCHER_PROPS=`echo $PREFIX/rcp/rcplauncher.properties`
	RCP_DATA=\${env.HOME}/lotus/notes/data/workspace
	RCP_INSTALL_ID=`date +%s`

	UPDATE_SITE_LIST=''
	if [ -d /etc/ibm/ibm_lotus_notes/updateSite ]; then
	UPDATE_SITE_LIST='file:///etc/ibm/ibm_lotus_notes/updateSite'
	func_installLog "-- UPDATE_SITE_LIST = $UPDATE_SITE_LIST" 
	fi

	# Override point -- /etc/ibm/<rpm name>/ location files
	# If there are external overrides in the /etc dir location, then copy those 
	# over, renaming the originals to used.<filename>.
	func_installLog "-- Checking for configuration overrides in /etc/ibm/ibm_lotus_notes/..." 
	if [ -f /etc/ibm/ibm_lotus_notes/install.options ]; then
		func_installLog "-- Copying /etc/ibm/ibm_lotus_notes/install.options to $PREFIX/rcp/deploy/..." 
		cp /etc/ibm/ibm_lotus_notes/install.options $PREFIX/rcp/deploy/
		cp -rf /etc/ibm/ibm_lotus_notes/install.options /etc/ibm/ibm_lotus_notes/used.install.options
fi
if [ -f /etc/ibm/ibm_lotus_notes/install.xml ]; then
		func_installLog "-- Copying /etc/ibm/ibm_lotus_notes/install.xml to $PREFIX/rcp/deploy/..." 
		cp /etc/ibm/ibm_lotus_notes/install.xml $PREFIX/rcp/deploy/
		cp -rf /etc/ibm/ibm_lotus_notes/install.xml /etc/ibm/ibm_lotus_notes/used.install.xml
	fi
	if [ -f /etc/ibm/ibm_lotus_notes/plugin_customization.ini ]; then
		func_installLog "-- Copying /etc/ibm/ibm_lotus_notes/plugin_customization.ini to $PREFIX/rcp/..." 
		cp /etc/ibm/ibm_lotus_notes/plugin_customization.ini $PREFIX/rcp/
		cp -rf /etc/ibm/ibm_lotus_notes/plugin_customization.ini /etc/ibm/ibm_lotus_notes/used.plugin_customization.ini
	fi
	ETC_KEYSTORE_FILES=`ls /etc/ibm/ibm_lotus_notes/.keystore* 2>/dev/null`
	if [ -n "$ETC_KEYSTORE_FILES" ]; then
		func_installLog "-- Copying /etc/ibm/ibm_lotus_notes/.keystore* to $PREFIX/rcp/deploy/..." 
		cp /etc/ibm/ibm_lotus_notes/.keystore* $PREFIX/rcp/deploy/
		for keystoreFile in `echo $ETC_KEYSTORE_FILES`
		do
			cp -rf ${keystoreFile} /etc/ibm/ibm_lotus_notes/used.${keystoreFile} 2>/dev/null
		done
	fi

	# If an install options file exists, then load it then delete it.  Since this
	# is really synonymous with a set of command line options, it shouldn't 
	# remain around the platform after being used.
	INSTALL_OPTIONS=$PREFIX/rcp/deploy/install.options
	if [ -f $INSTALL_OPTIONS ]; then
		func_installLog "-- Loading $INSTALL_OPTIONS..." 
		source $INSTALL_OPTIONS
		func_installLog "-- Removing $INSTALL_OPTIONS..." 
		rm -f $INSTALL_OPTIONS &>/dev/null
	fi

	if [ -n "$LICENSEACCEPTED" ]; then
		LICENSE_ACCEPTED=$LICENSEACCEPTED
	fi

	if [ -n "$RCPDATA" ]; then
		RCP_DATA=$RCPDATA
	fi

	if [ -n "$RCPLOCALE" ]; then
		RCP_LOCALE=$RCPLOCALE
	fi

	if [ -n "$UPDATESITELIST" ]; then
		UPDATE_SITE_LIST=$UPDATESITELIST
	fi

	if [ -n "$SKIPPROVISIONINGACTION" ]; then
		SKIP_PROVISIONING_ACTION=$SKIPPROVISIONINGACTION
	fi
 
	# If this is an initial install
	# Detect JVM and base plugin versions, ids and locations 
	func_getJVMAndBaseInfo 
	
	# Update rcplauncher.properties file
	func_installLog "-- Creating $RCPLAUNCHER_PROPS..." 
	echo "jvm.location=$JVM_LOCATION" > $RCPLAUNCHER_PROPS
	echo "jvm.parent.feature.id=$JVM_PARENT_FEATURE_ID" >> $RCPLAUNCHER_PROPS
	echo "jvm.parent.feature.version=$JVM_PARENT_FEATURE_VERSION" >> $RCPLAUNCHER_PROPS
	echo "jvm.feature.id=$JVM_FEATURE_ID" >> $RCPLAUNCHER_PROPS
	echo "jvm.feature.version=$JVM_FEATURE_VERSION" >> $RCPLAUNCHER_PROPS
	echo "rcp.install.id=$RCP_INSTALL_ID" >> $RCPLAUNCHER_PROPS
	echo "install.configuration=multiuser" >> $RCPLAUNCHER_PROPS
	echo "update.policy.managed=true" >> $RCPLAUNCHER_PROPS
	echo "provisioning=true" >> $RCPLAUNCHER_PROPS
	echo "provisioning.manifest.version=$RCP_INSTALL_ID" >> $RCPLAUNCHER_PROPS
	echo "provisioning.manifest=file\:/\${rcp.home}/rcp/deploy/install.xml" >> $RCPLAUNCHER_PROPS
	echo "provisioning.application=com.ibm.rcp.provisioning.application.ProvisioningApplication" >> $RCPLAUNCHER_PROPS
	echo "rcp.base.location=$RCP_BASE_LOCATION" >> $RCPLAUNCHER_PROPS
	echo "rcp.data=$RCP_DATA" >> $RCPLAUNCHER_PROPS
	echo "com.ibm.rcp.core.locale=$RCP_LOCALE" >> $RCPLAUNCHER_PROPS
	echo "config.notes.1=-name" >> $RCPLAUNCHER_PROPS
	echo "config.notes.2=IBM Lotus Notes" >> $RCPLAUNCHER_PROPS
	echo "config.notes.3=-personality " >> $RCPLAUNCHER_PROPS
	echo "config.notes.4=com.ibm.rcp.platform.personality" >> $RCPLAUNCHER_PROPS
	echo "config.notes.5=-product " >> $RCPLAUNCHER_PROPS
	echo "config.notes.6=com.ibm.notes.branding.notes" >> $RCPLAUNCHER_PROPS
	echo "osgi.splashPath=platform\:/base/../../shared/eclipse/plugins/com.ibm.notes.branding,platform\:/base/../../shared/eclipse/plugins/com.ibm.notes.branding.nl1,platform\:/base/../../shared/eclipse/plugins/com.ibm.notes.branding.nl2,platform\:/base/../../shared/eclipse/plugins/com.ibm.notes.branding.nl3" >> $RCPLAUNCHER_PROPS
	echo "java.exe.name.linux=notes2" >> $RCPLAUNCHER_PROPS
	echo "java.exe.name.win32=notes2.exe" >> $RCPLAUNCHER_PROPS
	echo "javaw.exe.name.linux=notes2w" >> $RCPLAUNCHER_PROPS
	echo "javaw.exe.name.win32=notes2w.exe" >> $RCPLAUNCHER_PROPS
	echo "eclipse.name=notes2" >> $RCPLAUNCHER_PROPS

	# Create .link files
	func_installLog "-- Creating .link files..." 
	mkdir -p $PREFIX/rcp/eclipse/links
	echo "path=$PREFIX/rcp" > $PREFIX/rcp/eclipse/links/rcp.link
	echo "path=$PREFIX/shared" > $PREFIX/rcp/eclipse/links/shared.link

	# Get base plugin_customization.ini file and move the delivered one, if
	# present, to prepare for merge
	func_installLog "-- Preparing for .ini file merge..." 
	cp $PREFIX/rcp/eclipse/plugins/$RCP_BASE_PLUGIN/plugin_customization.ini $PREFIX/rcp/plugin_customization.ini.orig
	mv $PREFIX/rcp/plugin_customization.ini $PREFIX/rcp/plugin_customization.ini.merge &> /dev/null

	# Merge .ini files
	func_installLog "-- Merging .ini files..." 
	func_mergeINI $PREFIX/rcp/plugin_customization.ini.orig $PREFIX/rcp/plugin_customization.ini.merge $PREFIX/rcp/plugin_customization.ini

	# Tell provisioning this is an initial install 
	PROV_OP=install

	# Provisioning step
	func_installProvisioning

	# Initialize JXE cache after provisioning if this is an initial installation
	func_initializeJXECache

	# Add the initial config app -- lapinvoker -- so that LAP is displayed on first launch
	echo "config.initial.1=-application" >> $RCPLAUNCHER_PROPS
	echo "config.initial.2=com.ibm.rcp.lapinvoker.LapInvokerApplication" >> $RCPLAUNCHER_PROPS
	echo "config.initial.3=-initialCompleteFlag" >> $RCPLAUNCHER_PROPS
	echo "config.initial.4=config.initial.complete" >> $RCPLAUNCHER_PROPS
	if [ "$LICENSE_ACCEPTED" = "true" ]; then
		echo "config.initial.5=-vmargs" >> $RCPLAUNCHER_PROPS
		echo "config.initial.6=-DlapAcceptLicense\=true" >> $RCPLAUNCHER_PROPS
	else
		echo "config.initial.5=-noSplash" >> $RCPLAUNCHER_PROPS
	fi

	# Create symbolic link to execute platform 
	#func_installLog "-- Creating symbolic link: /usr/bin/ibm_lotus_notes"
	#ln -fs $PREFIX/rcp/rcplauncher /usr/bin/ibm_lotus_notes

	# Perform post-install operation
	func_installLog "-- Execute post-install scripts for Notes"
	"${NOTES_BIN_DIR}/internal_uninst/postInstall.sh" "${NOTES_BIN_DIR}" "${NOTES_BIN_DIR}/data" True &>/dev/null
	echo "NotesBins=${NOTES_BIN_DIR}" > /etc/lotus/notes/notesrc
	echo "RCPHOME=${PREFIX}" >> /etc/lotus/notes/notesrc
	ln -fs ${PREFIX}/rcp/eclipse/plugins/$RCP_BASE_PLUGIN/linux/x86/notes2 ${NOTES_BIN_DIR}/notes2

	func_installLog "-- End post-install..."
}

## arg 1:  the new package version
## arg 2:  the old package version
pre_upgrade() {
	# Check for evidence of existing hotfix.
	func_installLog "-- Checking for existing hotfix marker file..."
	if [ -e /etc/ibm/lotus/ibm_lotus_notes/ibm_lotus_notes.hotfix ]; then
		func_installLog "-- Hotfix for this product was detected on the system.  Remove existing hotfix before upgrading."
		exit 80
	fi

	func_installLog "-- Running in upgrade mode..."
	OLD_MANIFEST_VERSION=`cat $PREFIX/rcp/rcplauncher.properties | grep provisioning.manifest.version | sed s/.*=//`
	func_installLog "-- Copying $PREFIX/rcp/deploy/install.xml to $PREFIX/rcp/deploy/install.${OLD_MANIFEST_VERSION}.xml..."
	cp $PREFIX/rcp/deploy/install.xml $PREFIX/rcp/deploy/install.${OLD_MANIFEST_VERSION}.xml
	func_installLog "-- Backing up $PREFIX/rcp/deploy/install.xml to $PREFIX/rcp/deploy/install.xml.orig..."
	cp $PREFIX/rcp/deploy/install.xml $PREFIX/rcp/deploy/install.xml.orig
	func_installLog "-- Backing up $PREFIX/rcp/plugin_customization.ini to $PREFIX/rcp/plugin_customization.ini.orig..."
	cp $PREFIX/rcp/plugin_customization.ini $PREFIX/rcp/plugin_customization.ini.orig
	func_installLog "-- Removing $PREFIX/rcp/deploy/.keystore*..."
	rm -f $PREFIX/rcp/deploy/.keystore*
}

## arg 1:  the new package version
## arg 2:  the old package version
post_upgrade() {
	function func_installProvisioning
	{
		if [ "$SKIP_PROVISIONING_ACTION" != "true" ]; then
			if [ "$PROVDEBUG" = "true" ]; then
				echo "Pause for provisioning debug.  For development use only."
				read x    
			fi

			if [ -n "$UPDATE_SITE_LIST" ]; then 
				OVERRIDE="-DprovUpdateSiteListOverride=$UPDATE_SITE_LIST"
			fi

			func_installLog "-- Running provisioning with the following command:"

			if [ -n "$PROVDEBUGCOMMANDFILE" ]; then
				PROVCOMMAND=`cat $PROVDEBUGCOMMANDFILE | sed s/debugCommand=//`
			else
				PROVCOMMAND="$PREFIX/rcp/rcplauncher -provManifest -rcpLauncherWait -noSplash -product NULL -provisioningOperation $PROV_OP -vmargs -DprovisioningOperation=$PROV_OP $OVERRIDE"
			fi

			func_installLog "-- $PROVCOMMAND"
			$PROVCOMMAND &>/dev/null

			# Check return code file to see if provisioning returned with 
			# success/error/partial results and log.
			if [ -f $PREFIX/.provisioning_rc ]; then 
				PROV_RC=`cat $PREFIX/.provisioning_rc | grep rc= | sed s/rc=//` 
				if [ "$PROV_RC" = "0" ]; then
					func_installLog "-- Provisioning success"
				elif [ "$PROV_RC" = "1" ]; then
					func_installLog "-- Provisioning error"
				elif [ "$PROV_RC" = "2" ]; then
					func_installLog "-- Provisioning success with partial results"
				fi

				rm -f $PREFIX/.provisioning_rc
			else
				func_installLog "-- Provisioning failed to launch, or terminated unexpectedly"
				func_installLog "-- Platform may have been running when upgrade/uninstall/hotfix was attempted"    
			fi 
		fi
	}

	func_installLog "-- Running in upgrade mode..." 

	# Run provisioning "unconfiginstallhandler" operation to run the disable handlers for the existing features
	PROV_OP=unconfiginstallhandler
	func_installProvisioning
		
	# Prepare for update
	func_installLog "-- Preparing files for upgrade..." 
	mv $PREFIX/rcp/deploy/install.xml $PREFIX/rcp/deploy/install.update.xml
	mv $PREFIX/rcp/plugin_customization.ini $PREFIX/rcp/plugin_customization.ini.merge
	mv $PREFIX/rcp/deploy/install.xml.orig $PREFIX/rcp/deploy/install.xml

	# Merge .ini files
	func_installLog "-- Merging .ini files..." 
	func_mergeINI $PREFIX/rcp/plugin_customization.ini.orig $PREFIX/rcp/plugin_customization.ini.merge $PREFIX/rcp/plugin_customization.ini

	# Detect JVM and base plugin versions, ids and locations 
	func_getJVMAndBaseInfo

	# Update rcplauncher.properties with new values to allow for reusable workspace
	func_installLog "-- Updating base plugin information..."
	func_replacePropValue $RCPLAUNCHER_PROPS rcp.base.location $RCP_BASE_LOCATION
	func_installLog "-- Updating jvm information..."
	func_replacePropValue $RCPLAUNCHER_PROPS jvm.location $JVM_LOCATION
	func_replacePropValue $RCPLAUNCHER_PROPS jvm.parent.feature.id $JVM_PARENT_FEATURE_ID 
	func_replacePropValue $RCPLAUNCHER_PROPS jvm.parent.feature.version $JVM_PARENT_FEATURE_VERSION
	func_replacePropValue $RCPLAUNCHER_PROPS jvm.feature.id $JVM_FEATURE_ID 
	func_replacePropValue $RCPLAUNCHER_PROPS jvm.feature.version $JVM_FEATURE_VERSION 
	func_installLog "-- Updating install id..." 
	func_replacePropValue $RCPLAUNCHER_PROPS rcp.install.id $RCP_INSTALL_ID
	func_installLog "-- Updating manifest version..." 
	func_replacePropValue $RCPLAUNCHER_PROPS provisioning.manifest.version $RCP_INSTALL_ID

	# Tell provisioning this is an upgrade 
	PROV_OP=update

	# Provisioning step
	func_installProvisioning
}

## arg 1:  the old package version
pre_remove() {
	function func_uninstallLog
	{
		echo `date "+%Y-%m-%d %T"` $1 >> /tmp/rcp_uninstall.log
	}

	func_checkIfRunning() 
	{
		pid=`ps ax | grep "$PREFIX" | grep "eclipse \-data" | grep -v grep | cut -f1 -d" "`
			
		if [ -n "$pid" ]; then
			func_uninstallLog "A running instance of the platform was detected, pid=$pid"
			func_uninstallLog "Please exit the platform before uninstalling"
			exit 70
		fi
	}

	function func_uninstallProvisioning
	{
		if [ "$SKIP_PROVISIONING_ACTION" != "true" ]; then
			if [ "$PROVDEBUG" = "true" ]; then
				 echo "Pause for provisioning debug.  For development use only."
				 read x    
			fi
			
			func_uninstallLog "-- Launching de-provisioning with the following command:" 
			if [ -n "$PROVDEBUGCOMMANDFILE" ]; then
				PROVCOMMAND=`cat $PROVDEBUGCOMMANDFILE | sed s/debugCommand=//`
			else
				PROVCOMMAND="$PREFIX/rcp/rcplauncher -provManifest -rcpLauncherWait -noSplash -product NULL -provisioningOperation $PROV_OP -vmargs -DprovisioningOperation=uninstall"
			fi

			func_uninstallLog "-- $PROVCOMMAND" 
			$PROVCOMMAND &>/dev/null

			# Check return code file to see if provisioning returned with 
			# success/error/partial results and log.
			if [ -f $PREFIX/.provisioning_rc ]; then 
				PROV_RC=`cat $PREFIX/.provisioning_rc | grep rc= | sed s/rc=//` 
				if [ "$PROV_RC" = "0" ]; then
					func_uninstallLog "-- Provisioning success" 
				elif [ "$PROV_RC" = "1" ]; then
					func_uninstallLog "-- Provisioning error" 
				elif [ "$PROV_RC" = "2" ]; then
					func_uninstallLog "-- Provisioning success with partial results" 
				fi

				rm -f $PREFIX/.provisioning_rc
			else
				func_uninstallLog "-- Provisioning failed to launch, or terminated unexpectedly"
				func_uninstallLog "-- Platform may have been running when upgrade/uninstall/hotfix was attempted"    
			fi
		fi
	}

	# Set up environment
	umask 0022

	if [ -e /opt/gnome/bin ]; then
		export PATH=$PATH:/opt/gnome/bin
	fi

	if [ -n $DISPLAY ]; then
		export -n DISPLAY=
	fi

	NOTES_BIN_DIR=/opt/ibm/lotus/notes 
	if [ -n "$RPM_INSTALL_PREFIX" ]; then
		NOTES_BIN_DIR=$RPM_INSTALL_PREFIX
	fi
	PREFIX=${NOTES_BIN_DIR}/framework

	if [ "$USER" = "" -o -n "$SUDO_USER" ]; then
		export USER=root
		if [ -d /root ]; then
			 export HOME=/root
		fi
	fi

	# If this is a final uninstall
	"$NOTES_BIN_DIR/internal_uninst/uninstall.sh" "$NOTES_BIN_DIR" True &>/dev/null
	unlink ${NOTES_BIN_DIR}/notes2

	mkdir -p $PREFIX
	rm -rf /tmp/rcp_uninstall.log
	func_uninstallLog "-- Begin pre-uninstall..."

	# If there are external overrides in the /etc dir location, then copy those 
	# over, renaming the originals to used.<filename>.
	func_uninstallLog "-- Checking for configuration overrides in /etc/ibm/ibm_lotus_notes/..." 
	if [ -f /etc/ibm/ibm_lotus_notes/install.options ]; then
		func_uninstallLog "-- Copying /etc/ibm/ibm_lotus_notes/install.options to $PREFIX/rcp/deploy/..." 
		cp /etc/ibm/ibm_lotus_notes/install.options $PREFIX/rcp/deploy/
		cp -rf /etc/ibm/ibm_lotus_notes/install.options /etc/ibm/ibm_lotus_notes/used.install.options
	fi

	# If an install options file exists, then load it then delete it.  Since this
	# is really synonymous with a set of command line options, it shouldn't 
	# remain around the platform after being used.
	INSTALL_OPTIONS=$PREFIX/rcp/deploy/install.options
	if [ -f $INSTALL_OPTIONS ]; then
		func_uninstallLog "-- Loading $INSTALL_OPTIONS..." 
		source $INSTALL_OPTIONS
		func_uninstallLog "-- Removing $INSTALL_OPTIONS..." 
		rm -f $INSTALL_OPTIONS &>/dev/null
	fi

	# Run provisioning "uninstall" operation, which, the first time it is called, will disable features
	PROV_OP=uninstall
	func_uninstallProvisioning

	# Run provisioning "uninstall" operation, which, the second time it is called, will uninstall features
	PROV_OP=uninstall
	func_uninstallProvisioning

	func_uninstallLog "-- End pre-uninstall..."
}

## arg 1:  the old package version
post_remove() {
	function func_uninstallLog
	{
		echo `date "+%Y-%m-%d %T"` $1 >> /tmp/rcp_uninstall.log
	}

	# Set up environment
	umask 0022

	if [ -e /opt/gnome/bin ]; then
		export PATH=$PATH:/opt/gnome/bin
	fi

	if [ -n $DISPLAY ]; then
		export -n DISPLAY=
	fi

	NOTES_BIN_DIR=/opt/ibm/lotus/notes 
	if [ -n "$RPM_INSTALL_PREFIX" ]; then
		NOTES_BIN_DIR=$RPM_INSTALL_PREFIX
	fi
	PREFIX=${NOTES_BIN_DIR}/framework

	if [ "$USER" = "" -o -n "$SUDO_USER" ]; then
		export USER=root
		if [ -d /root ]; then
			 export HOME=/root
		fi
	fi

	func_uninstallLog "-- Begin post-uninstall..." 

	# Otherwise clean up the residual platform files.
	func_uninstallLog "-- Cleaning up residual platform files..." 
	rm -rf $PREFIX/shared
	rm -rf $PREFIX/rcp
	rm -rf ${HOME}/lotus/notes

	func_uninstallLog "-- End post-uninstall..."
}

